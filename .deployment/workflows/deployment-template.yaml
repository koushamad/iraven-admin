apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: iraven-admin-deployment-template
spec:
  templates:
    - name: wait-for-deployment
      retryStrategy:
        limit: 5
        backoff:
          duration: "30s"
          factor: 2
      inputs:
        parameters:
          - name: namespace
          - name: docker-tag
      container:
        image: harbor.kousha.dev/library/kubectl:latest
        command: ["/bin/bash", "-c"]
        args:
          - |
            echo "üöÄ Waiting for deployment to be ready..."

            NAMESPACE="{{inputs.parameters.namespace}}"
            DOCKER_TAG="{{inputs.parameters.docker-tag}}"
            DEPLOYMENT_NAME="iraven-admin"

            echo "Checking deployment in namespace: $NAMESPACE"
            echo "Expected image tag: $DOCKER_TAG"

            # Wait for deployment to exist (ArgoCD might take some time to sync it)
            echo "‚è≥ Waiting for deployment to be synced by ArgoCD..."
            RETRIES=0
            MAX_RETRIES=60
            while [ $RETRIES -lt $MAX_RETRIES ]; do
                if kubectl get deployment $DEPLOYMENT_NAME -n $NAMESPACE >/dev/null 2>&1; then
                    echo "‚úÖ Deployment found!"
                    break
                fi
                RETRIES=$((RETRIES + 1))
                echo "Attempt $RETRIES/$MAX_RETRIES: Deployment not found, waiting 10 seconds..."
                sleep 10
                if [ $RETRIES -eq $MAX_RETRIES ]; then
                    echo "‚ùå Deployment not found after $(($MAX_RETRIES * 10)) seconds"
                    echo "Available resources:"
                    kubectl get all -n $NAMESPACE || echo "Cannot list resources"
                    exit 1
                fi
            done

            # Wait for deployment rollout to complete
            echo "‚è≥ Waiting for deployment rollout to complete..."
            kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE --timeout=600s

            if [ $? -eq 0 ]; then
                echo "‚úÖ Deployment rollout completed successfully!"

                # Verify the correct image is deployed
                CURRENT_IMAGE=$(kubectl get deployment $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].image}')
                echo "Current deployed image: $CURRENT_IMAGE"

                if echo "$CURRENT_IMAGE" | grep -q "$DOCKER_TAG"; then
                    echo "‚úÖ Correct image version deployed!"
                else
                    echo "‚ö†Ô∏è  Image version mismatch"
                    echo "Expected tag: $DOCKER_TAG"
                    echo "Current image: $CURRENT_IMAGE"
                fi

                # Additional health check
                echo "üîç Performing health check..."

                # Check if pods are running
                READY_REPLICAS=$(kubectl get deployment $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath='{.status.readyReplicas}')
                DESIRED_REPLICAS=$(kubectl get deployment $DEPLOYMENT_NAME -n $NAMESPACE -o jsonpath='{.spec.replicas}')
                echo "Ready replicas: $READY_REPLICAS/$DESIRED_REPLICAS"

                # Check service
                if kubectl get service iraven-admin -n $NAMESPACE >/dev/null 2>&1; then
                    echo "‚úÖ Service iraven-admin is available"
                else
                    echo "‚ö†Ô∏è  Service iraven-admin not found"
                fi

                echo "‚úÖ Deployment verification complete!"
            else
                echo "‚ùå Deployment rollout failed or timed out"
                kubectl describe deployment $DEPLOYMENT_NAME -n $NAMESPACE
                kubectl get pods -n $NAMESPACE -l app=iraven-admin
                exit 1
            fi
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
