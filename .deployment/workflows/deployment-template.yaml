apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: iraven-admin-deployment-template
spec:
  templates:
    - name: wait-for-deployment
      retryStrategy:
        limit: 5
        backoff:
          duration: "30s"
          factor: 2
      inputs:
        parameters:
          - name: namespace
          - name: docker-tag
      container:
        image: harbor.kousha.dev/library/kubectl:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "üöÄ Waiting for deployment to be ready..."
            
            NAMESPACE="{{inputs.parameters.namespace}}"
            DOCKER_TAG="{{inputs.parameters.docker-tag}}"
            
            echo "Checking deployment in namespace: $NAMESPACE"
            echo "Expected image tag: $DOCKER_TAG"
            
            # Wait for rollout to exist (ArgoCD might take some time to create it)
            echo "‚è≥ Waiting for rollout to be created by ArgoCD..."
            for i in {1..60}; do
                if kubectl get rollout iraven-admin -n $NAMESPACE >/dev/null 2>&1; then
                    echo "‚úÖ Rollout found!"
                    break
                fi
                echo "Attempt $i: Rollout not found, waiting 10 seconds..."
                echo "Current rollouts in namespace $NAMESPACE:"
                kubectl get rollouts -n $NAMESPACE || echo "No rollouts found or permission denied"
                sleep 10
                if [ $i -eq 60 ]; then
                    echo "‚ùå Rollout not found after 10 minutes"
                    echo "Available resources:"
                    kubectl get all -n $NAMESPACE || echo "Cannot list resources"
                    exit 1
                fi
            done
            
            # Wait for rollout to be ready
            echo "‚è≥ Waiting for rollout to be ready..."
            echo "Current rollout status:"
            kubectl describe rollout iraven-admin -n $NAMESPACE || echo "Cannot describe rollout"

            # Use kubectl wait for Argo Rollouts CRD (not kubectl rollout status which only works with native k8s resources)
            kubectl wait --for=condition=Completed rollout/iraven-admin -n $NAMESPACE --timeout=600s
            
            if [ $? -eq 0 ]; then
                echo "‚úÖ Deployment is ready!"

                # Verify the correct image is deployed
                CURRENT_IMAGE=$(kubectl get rollout iraven-admin -n $NAMESPACE -o jsonpath='{.spec.template.spec.containers[0].image}')
                echo "Current deployed image: $CURRENT_IMAGE"
            
                if [[ "$CURRENT_IMAGE" == *"$DOCKER_TAG"* ]]; then
                    echo "‚úÖ Correct image version deployed!"
                else
                    echo "‚ö†Ô∏è  Image version mismatch, but proceeding..."
                fi
            
                # Additional health check
                echo "üîç Performing health check..."
                sleep 30  # Give the service time to fully start

                SERVICE_NAME="iraven-admin-service"
                if kubectl get service $SERVICE_NAME -n $NAMESPACE >/dev/null 2>&1; then
                    echo "‚úÖ Service $SERVICE_NAME is available"
                else
                    echo "‚ö†Ô∏è  Service $SERVICE_NAME not found, but proceeding..."
                fi
            
            else
                echo "‚ùå Deployment failed or timed out"
                exit 1
            fi
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
